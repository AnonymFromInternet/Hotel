{{define "base" }}
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Hotel</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/css/datepicker.min.css">
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
        <link rel="stylesheet" href="/static/css/styles.css">
    </head>
    <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Main Page</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Variants
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <li><a class="dropdown-item" href="/president">President</a></li>
                            <li><a class="dropdown-item" href="/business">Business</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/calender">Calender</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contacts">Contacts</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    {{block "content".}}

    {{end}}

    <div class="row">
        <div class="col footer">
            <h5>Text</h5>
        </div>
        <div class="col footer">
            <h5>Text</h5>
        </div>
        <div class="col footer">
            <h5>Text</h5>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    {{block "js" .}}

    {{end}}

    <script>
        const {toast, success, error, custom} = prompt();

        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            let forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()

        const notify = (msg, msgType) => {
            notie.alert({
                type: msgType,
                text: msg
            })
        }

        const notifyModal = (title, html, icon, button) => {
            Swal.fire({
                title: title,
                html: html,
                icon: icon,
                confirmButtonText: button
            })
        }

        {{with .Error}}
            notify("{{.}}", "error")
        {{end}}

        {{with .Message}}
            notify("{{.}}", "success")
        {{end}}

        {{with .Warning}}
            notify("{{.}}", "warning")
        {{end}}

        function prompt () {

            let toast = param => {
                const {
                    msg = "",
                    icon = "success",
                    position = "top-end"
                } = param

                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({})
            }

            let success = param => {
                const {
                    msg = "",
                    title = "",
                    footer = ""
                } = param

                Swal.fire({
                    icon: 'success',
                    title: title,
                    text: msg,
                    footer: footer
                })
            }
            let error = param => {
                const {
                    msg = "",
                    title = "",
                    footer = ""
                } = param

                Swal.fire({
                    icon: 'success',
                    title: title,
                    text: msg,
                    footer: footer
                })
            }
            const custom = async params => {
                const {html ="", title ="", callback, willOpen, didOpen} = params

                const { value: result } = await Swal.fire({
                    title: title,
                    html: html,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    willOpen: () => {
                        if (willOpen !== undefined) {
                            willOpen();
                        }
                    },
                    preConfirm: () => {
                        return [
                            document.getElementById('start').value,
                            document.getElementById('end').value
                        ]
                    },
                    didOpen: () => {
                        if (didOpen !== undefined) {
                            didOpen();
                        }
                    }
                })
                if (result) {
                    if (result.dismiss !== Swal.DismissReason.cancel) {
                        if (result.value !== "") {
                            if (callback !== undefined) {
                                callback(result);
                            } else {
                                callback(false)
                            }
                        } else {
                            callback(false)
                        }
                    }
                }
            }
            return {
                toast,
                success,
                error,
                custom
            }
        }
    </script>
    </body>
    </html>

{{end}}
